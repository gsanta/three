// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int        @id @default(autoincrement())
  email     String     @unique
  name      String?
  password  String?
  provider  String     @default("credentials")
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  snapshots Snapshot[]
}

model BlockType {
  id             Int           @id @default(autoincrement())
  categoryName   String
  category       BlockCategory @relation(fields: [categoryName], references: [name])
  decorations    Json          @default("[]")
  parts          Json?
  partDetails    Json?
  path           String?
  type           String        @unique
  animations     Json?
}

model BlockCategory {
  id              Int         @id @default(autoincrement())
  name            String      @unique
  BlockType       BlockType[]
  addMethods      BlockAddMethodsOnCategories[]
  categories      BlockContextMenuActionOnCategories[] @relation(name: "category")
  categories2     BlockContextMenuActionOnCategories[] @relation(name: "category2")
}

model BlockAddMethod {
  id         Int         @id @default(autoincrement())
  name       String      @unique
  executeAfterRender  Boolean       @default(false)
  categories BlockAddMethodsOnCategories[]
}

model BlockAddMethodsOnCategories {
  addMethod                 BlockAddMethod @relation(fields: [addMethodName], references: [name])
  addMethodName             String 
  category                  BlockCategory  @relation(fields: [sourceCategoryName], references: [name])
  sourceCategoryName        String
  targetCategoryName        String?
  targetPartRole            String?
  sourcePartRole            String?
  connectionType            String?

  @@id([addMethodName, sourceCategoryName])
}

model BlockContextMenuAction {
  id         Int         @id @default(autoincrement())
  name       String      @unique
  categories BlockContextMenuActionOnCategories[]
}

model BlockContextMenuActionOnCategories {
  contextMenuAction     BlockContextMenuAction @relation(fields: [contextMenuActionName], references: [name])
  contextMenuActionName String
  category              BlockCategory  @relation(fields: [categoryName], name: "category", references: [name])
  categoryName          String
  category2             BlockCategory  @relation(fields: [categoryName2], name: "category2", references: [name])
  categoryName2         String
  
  @@id([contextMenuActionName, categoryName, categoryName2])
}

model Snapshot {
  id        String   @id @default(uuid())
  state     Json?
  User      User?    @relation(fields: [userId], references: [id])
  userId    Int?
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @db.Timestamptz(6)
}
