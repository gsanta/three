version: 2.1

jobs:
  build_cpp:
    working_directory: ~/editor
    machine:
      image: ubuntu-2004:current
    resource_class: large
    steps:
      - checkout
      - run:
          name: Compile cpp with emscripten
          command: |
            set -x
            cd editor
            docker-compose run --rm compile-emscripten; echo $?
      - persist_to_workspace:
          root: editor/Web
          paths:
            - spright.js
            - spright.wasm
  cpp_unit_test:
    working_directory: ~/editor
    machine:
      image: ubuntu-2004:current
    resource_class: large
    steps:
      - checkout
      - run:
          name: Cpp unit test
          command: |
            set -x
            cd editor
            docker-compose run --rm unit-test; echo $?
          environment: 
            UNIT_TEST: 'true'
      - store_test_results:
          path: editor/tests/unit_test_result.xml
  build_client:
    working_directory: ~/client
    docker:
      - image: cimg/node:16.15.0
    steps:
      - checkout
      - run:
          name: Install Dependencies
          command: cd client && npm i
      - run:
          name: Build
          command: cd client && npm run build
  assemble_frontend:
    docker:
      - image: cimg/node:16.15.0
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "dc:92:64:8c:74:1a:84:49:fd:90:ba:7c:5a:0a:50:ec"
      - attach_workspace:
          at: /tmp/editor/Web
      - run:
          name: Copy files
          command: |
            mkdir -p client/static
            cp /tmp/editor/Web/spright.js client/static
            cp /tmp/editor/Web/spright.wasm client/static
            git config user.email "santagergely90@gmail.com"
            git config user.name "CircleCI Job"
            git add -A
            git commit --allow-empty -am "Automatic commit from CircleCI [skip ci]"
            git push origin master
  deploy:
    docker:
      - image: cimg/node:16.15.0
    steps:
      - run:
          name: Trigger deploy
          command: |
            curl $RENDER_DEPLOY_HOOK_FRONTEND
workflows:
  build-test-and-deploy:
    jobs:
      - cpp_unit_test
      - build_cpp
      - build_client
      - assemble_frontend:
          requires:
            - build_cpp
            - build_client
            - cpp_unit_test
      - deploy:
          requires:
            - "assemble_frontend"
          filters:
            branches:
              only: /^master/
